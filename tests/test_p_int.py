import numpy as np

from pnums import PInt
from pnums.p_int import layer_or, layer_xor


def test_create_1d():
    a = PInt(123456789, confidence=0.6)
    np.testing.assert_array_almost_equal(
        [
            [
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.6,
                0.6,
                0.6,
                0.0,
                0.6,
                0.0,
                0.6,
                0.6,
                0.0,
                0.6,
                0.6,
                0.6,
                0.6,
                0.0,
                0.0,
                0.6,
                0.6,
                0.0,
                0.6,
                0.0,
                0.0,
                0.0,
                0.6,
                0.0,
                0.6,
                0.0,
                0.6,
            ],
            [
                0.6,
                0.6,
                0.6,
                0.6,
                0.6,
                0.0,
                0.0,
                0.0,
                0.6,
                0.0,
                0.6,
                0.0,
                0.0,
                0.6,
                0.0,
                0.0,
                0.0,
                0.0,
                0.6,
                0.6,
                0.0,
                0.0,
                0.6,
                0.0,
                0.6,
                0.6,
                0.6,
                0.0,
                0.6,
                0.0,
                0.6,
                0.0,
            ],
        ],
        a.tensor,
    )


def test_create_2d():
    a = PInt(123, 234, bits=8, confidence=0.6)
    np.testing.assert_array_almost_equal(
        [
            [
                [0.0, 0.6000, 0.6000, 0.0, 0.6000, 0.0, 0.6000, 0.0],
                [0.0, 0.0, 0.0, 0.6000, 0.0, 0.0, 0.0, 0.6000],
            ],
            [
                [0.6000, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.6000, 0.0, 0.0],
            ],
        ],
        a.tensor,
    )


def test_create_3d():
    a = PInt(14, 11, 7, bits=4, confidence=0.6)
    np.testing.assert_array_almost_equal(
        [
            [
                [[0.0, 0.0, 0.6000, 0.0], [0.6000, 0.0, 0.0, 0.0]],
                [[0.0, 0.6000, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
            ],
            [
                [[0.0, 0.0, 0.0, 0.6000], [0.0, 0.0, 0.0, 0.0]],
                [[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
            ],
        ],
        a.tensor,
    )


def test_add_1d():
    a = PInt(10, bits=5, confidence=0.8)
    b = PInt(6, bits=5, confidence=0.9)
    c = a + b
    np.testing.assert_array_almost_equal(
        [
            [1.255276, 0.449717, 0.464048, 0.464054, 0.442],
            [0.444724, 1.250283, 1.235952, 1.235946, 1.258],
        ],
        c.tensor,
    )
    c = c.normalize()
    np.testing.assert_array_almost_equal(
        [
            [0.738398, 0.264539, 0.27297, 0.272973, 0.26],
            [0.261602, 0.735461, 0.72703, 0.727027, 0.74],
        ],
        c.tensor,
    )
    q = c.quantize()
    np.testing.assert_array_almost_equal(
        [[1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, 1.0, 1.0]], q.tensor
    )
    i = float(c)
    assert i == 16

    a = PInt(10, bits=5)
    b = PInt(6, bits=5)

    c = a + b
    i = int(c)
    assert i == 16

    a = PInt(1, bits=5)
    b = PInt(1, bits=5)

    c = a + b
    i = int(c)
    assert i == 2


def test_add_2d():
    a = PInt(10, 11, bits=8)
    b = PInt(6, 13, bits=8)
    c = a + b
    np.testing.assert_array_almost_equal(
        [
            [
                [0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            ],
            [
                [0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0],
                [2.0, 2.0, 2.0, 0.0, 0.0, 2.0, 2.0, 2.0],
            ],
        ],
        c.tensor,
    )

    a = PInt(10, 11, bits=8, confidence=0.8)
    b = PInt(6, 13, bits=8, confidence=0.9)
    c = a + b
    np.testing.assert_array_almost_equal(
        [
            [
                [
                    0.16076934,
                    0.17469499,
                    0.2556258,
                    1.075256,
                    0.15988274,
                    0.15490383,
                    0.158193,
                    0.1548889,
                ],
                [
                    0.16072737,
                    0.17449431,
                    0.25502256,
                    0.19272345,
                    0.15489082,
                    0.19347353,
                    0.158193,
                    0.1548889,
                ],
            ],
            [
                [
                    0.16072737,
                    0.17449431,
                    0.25502256,
                    0.27291635,
                    1.2302834,
                    0.15530683,
                    0.158193,
                    0.1548889,
                ],
                [
                    1.217776,
                    1.1763165,
                    0.93432903,
                    0.15910417,
                    0.15494315,
                    1.1963159,
                    1.225421,
                    1.2353333,
                ],
            ],
        ],
        c.tensor,
    )

    np.testing.assert_array_almost_equal(
        [
            [
                [
                    0.0472851,
                    0.05138088,
                    0.07518407,
                    0.31625178,
                    0.04702433,
                    0.04555995,
                    0.04652735,
                    0.04555556,
                ],
                [
                    0.04727275,
                    0.05132185,
                    0.07500663,
                    0.05668338,
                    0.04555612,
                    0.05690398,
                    0.04652735,
                    0.04555556,
                ],
            ],
            [
                [
                    0.04727275,
                    0.05132185,
                    0.07500663,
                    0.08026952,
                    0.36184806,
                    0.04567848,
                    0.04652735,
                    0.04555556,
                ],
                [
                    0.35816938,
                    0.34597543,
                    0.27480265,
                    0.04679535,
                    0.04557151,
                    0.3518576,
                    0.3604179,
                    0.3633333,
                ],
            ],
        ],
        c.normalize(0.5).tensor,
    )

    q = c.quantize()
    np.testing.assert_array_almost_equal(
        [
            [
                [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            ],
            [
                [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0],
            ],
        ],
        q.tensor,
    )

    assert c.asfloat() == (16, 24)

    a = PInt(1, 2, bits=6)
    b = PInt(2, 1, bits=6)
    c = a + b
    np.testing.assert_array_almost_equal(
        [
            [[0.0, 0.0, 0.0, 0.0, 2.0, 2.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
            [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2.0, 2.0, 2.0, 2.0, 0.0, 0.0]],
        ],
        c.tensor,
    )

    assert c.asfloat() == (3, 3)


def test_add_3d():
    a = PInt(10, 11, 12, bits=8)
    b = PInt(6, 13, 7, bits=8)
    c = a + b
    np.testing.assert_array_almost_equal(
        [
            [
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0],
                ],
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0],
                ],
            ],
            [
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0],
                ],
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0],
                    [2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                ],
            ],
        ],
        c.tensor,
    )
    assert c.asfloat() == (16, 24, 19)

    a = PInt(10, 11, bits=8, confidence=0.8)
    b = PInt(6, 13, bits=8, confidence=0.9)
    c = a + b
    np.testing.assert_array_almost_equal(
        [
            [
                [
                    0.16076934,
                    0.17469499,
                    0.2556258,
                    1.075256,
                    0.15988274,
                    0.15490383,
                    0.158193,
                    0.1548889,
                ],
                [
                    0.16072737,
                    0.17449431,
                    0.25502256,
                    0.19272345,
                    0.15489082,
                    0.19347353,
                    0.158193,
                    0.1548889,
                ],
            ],
            [
                [
                    0.16072737,
                    0.17449431,
                    0.25502256,
                    0.27291635,
                    1.2302834,
                    0.15530683,
                    0.158193,
                    0.1548889,
                ],
                [
                    1.217776,
                    1.1763165,
                    0.93432903,
                    0.15910417,
                    0.15494315,
                    1.1963159,
                    1.225421,
                    1.2353333,
                ],
            ],
        ],
        c.tensor,
    )

    np.testing.assert_array_almost_equal(
        [
            [
                [
                    0.0472851,
                    0.05138088,
                    0.07518407,
                    0.31625178,
                    0.04702433,
                    0.04555995,
                    0.04652735,
                    0.04555556,
                ],
                [
                    0.04727275,
                    0.05132185,
                    0.07500663,
                    0.05668338,
                    0.04555612,
                    0.05690398,
                    0.04652735,
                    0.04555556,
                ],
            ],
            [
                [
                    0.04727275,
                    0.05132185,
                    0.07500663,
                    0.08026952,
                    0.36184806,
                    0.04567848,
                    0.04652735,
                    0.04555556,
                ],
                [
                    0.35816938,
                    0.34597543,
                    0.27480265,
                    0.04679535,
                    0.04557151,
                    0.3518576,
                    0.3604179,
                    0.3633333,
                ],
            ],
        ],
        c.normalize(0.5).tensor,
    )

    q = c.quantize()
    np.testing.assert_array_almost_equal(
        [
            [
                [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            ],
            [
                [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0],
            ],
        ],
        q.tensor,
    )

    a = PInt(1, 2, bits=6)
    b = PInt(2, 1, bits=6)
    c = a + b
    np.testing.assert_array_almost_equal(
        [
            [[0.0, 0.0, 0.0, 0.0, 2.0, 2.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
            [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2.0, 2.0, 2.0, 2.0, 0.0, 0.0]],
        ],
        c.tensor,
    )


def test_layer_xor():
    a = np.asarray([0, 1])
    b = np.asarray([1, 0])
    c = np.asarray([0.7, 0.3])
    d = np.asarray([0.5, 0.5])

    ab = layer_xor(a, b)
    bc = layer_xor(b, c)
    cc = layer_xor(c, c)
    bd = layer_xor(b, d)
    print("hi")

    a = np.asarray([[0, 1], [0, 0]])
    b = np.asarray([[1, 0], [0, 0]])
    c = np.asarray([[0.4, 0.1], [0.3, 0.2]])
    d = np.asarray([[0.25, 0.25], [0.25, 0.25]])

    ab = layer_xor(a, b)
    ac = layer_xor(a, c)
    cc = layer_xor(c, c)
    bd = layer_xor(b, d)
    print("hi")


def test_layer_or():
    a = np.asarray([0, 1])
    b = np.asarray([1, 0])
    c = np.asarray([0.7, 0.3])
    d = np.asarray([0.5, 0.5])

    ab = layer_or(a, b)
    bc = layer_or(b, c)
    cc = layer_or(c, c)
    bd = layer_or(b, d)
    print("hi")

    a = np.asarray([[0, 1], [0, 0]])
    b = np.asarray([[1, 0], [0, 0]])
    c = np.asarray([[0.4, 0.1], [0.3, 0.2]])
    d = np.asarray([[0.25, 0.25], [0.25, 0.25]])

    ab = layer_or(a, b)
    ac = layer_or(a, c)
    cc = layer_or(c, c)
    bd = layer_or(b, d)
    print("hi")
