import numpy as np

from pnums import PInt
from pnums.p_int import layer_or, layer_xor


def test_create_1d():
    a = PInt(123456789, confidence=0.6)
    np.testing.assert_array_almost_equal(
        [
            [
                0.4,
                0.4,
                0.4,
                0.4,
                0.4,
                0.6,
                0.6,
                0.6,
                0.4,
                0.6,
                0.4,
                0.6,
                0.6,
                0.4,
                0.6,
                0.6,
                0.6,
                0.6,
                0.4,
                0.4,
                0.6,
                0.6,
                0.4,
                0.6,
                0.4,
                0.4,
                0.4,
                0.6,
                0.4,
                0.6,
                0.4,
                0.6,
            ],
            [
                0.6,
                0.6,
                0.6,
                0.6,
                0.6,
                0.4,
                0.4,
                0.4,
                0.6,
                0.4,
                0.6,
                0.4,
                0.4,
                0.6,
                0.4,
                0.4,
                0.4,
                0.4,
                0.6,
                0.6,
                0.4,
                0.4,
                0.6,
                0.4,
                0.6,
                0.6,
                0.6,
                0.4,
                0.6,
                0.4,
                0.6,
                0.4,
            ],
        ],
        a.tensor,
    )


def test_create_2d():
    a = PInt(123, 234, bits=8, confidence=0.6)
    np.testing.assert_array_almost_equal(
        [
            [
                [
                    0.133333,
                    0.6000,
                    0.6000,
                    0.133333,
                    0.6000,
                    0.133333,
                    0.6000,
                    0.133333,
                ],
                [
                    0.133333,
                    0.133333,
                    0.133333,
                    0.6000,
                    0.133333,
                    0.133333,
                    0.133333,
                    0.6000,
                ],
            ],
            [
                [
                    0.6000,
                    0.133333,
                    0.133333,
                    0.133333,
                    0.133333,
                    0.133333,
                    0.133333,
                    0.133333,
                ],
                [
                    0.133333,
                    0.133333,
                    0.133333,
                    0.133333,
                    0.133333,
                    0.6000,
                    0.133333,
                    0.133333,
                ],
            ],
        ],
        a.tensor,
    )


def test_create_3d():
    a = PInt(14, 11, 7, bits=4, confidence=0.6)
    np.testing.assert_array_almost_equal(
        [
            [
                [
                    [0.057143, 0.057143, 0.6000, 0.057143],
                    [0.6000, 0.057143, 0.057143, 0.057143],
                ],
                [
                    [0.057143, 0.6000, 0.057143, 0.057143],
                    [0.057143, 0.057143, 0.057143, 0.057143],
                ],
            ],
            [
                [
                    [0.057143, 0.057143, 0.057143, 0.6000],
                    [0.057143, 0.057143, 0.057143, 0.057143],
                ],
                [
                    [0.057143, 0.057143, 0.057143, 0.057143],
                    [0.057143, 0.057143, 0.057143, 0.057143],
                ],
            ],
        ],
        a.tensor,
    )


def test_add_1d():
    a = PInt(10, bits=5, confidence=0.8)
    b = PInt(6, bits=5, confidence=0.9)
    c = a + b
    np.testing.assert_array_almost_equal(
        [
            [0.8504768, 0.753892, 0.669292, 0.45831996, 0.442],
            [0.84952325, 0.9461081, 1.0307081, 1.24168, 1.258],
        ],
        c.tensor,
    )
    c = c.normalize()
    np.testing.assert_array_almost_equal(
        [
            [0.50028044, 0.44346586, 0.39370114, 0.26959997, 0.26],
            [0.49971953, 0.5565342, 0.60629886, 0.73039997, 0.74],
        ],
        c.tensor,
    )
    q = c.quantize()
    np.testing.assert_array_almost_equal(
        [[1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, 1.0, 1.0]], q.tensor
    )
    i = float(c)
    assert i == 16

    a = PInt(10, bits=5)
    b = PInt(6, bits=5)

    c = a + b
    i = int(c)
    assert i == 16

    a = PInt(1, bits=5)
    b = PInt(1, bits=5)

    c = a + b
    i = int(c)
    assert i == 2


def test_add_2d():
    a = PInt(10, 11, bits=8)
    b = PInt(6, 13, bits=8)
    c = a + b
    np.testing.assert_array_almost_equal(
        [
            [
                [0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            ],
            [
                [0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0],
                [2.0, 2.0, 2.0, 0.0, 0.0, 2.0, 2.0, 2.0],
            ],
        ],
        c.tensor,
    )

    a = PInt(10, 11, bits=8, confidence=0.8)
    b = PInt(6, 13, bits=8, confidence=0.9)
    c = a + b
    np.testing.assert_array_almost_equal(
        [
            [
                [
                    0.15804069,
                    0.16226967,
                    0.20636845,
                    0.6811368,
                    0.31998023,
                    0.21316226,
                    0.16209187,
                    0.1548889,
                ],
                [
                    0.16720827,
                    0.17999499,
                    0.23011242,
                    0.2770214,
                    0.30978364,
                    0.30276603,
                    0.15728992,
                    0.1548889,
                ],
            ],
            [
                [
                    0.16867277,
                    0.18810391,
                    0.27501187,
                    0.5256308,
                    0.6511188,
                    0.44122377,
                    0.35417086,
                    0.1548889,
                ],
                [
                    1.2060783,
                    1.1696315,
                    0.9885073,
                    0.21621099,
                    0.41911733,
                    0.742848,
                    1.0264474,
                    1.2353333,
                ],
            ],
        ],
        c.tensor,
    )

    np.testing.assert_array_almost_equal(
        [
            [
                [
                    0.04648256,
                    0.04772637,
                    0.0606966,
                    0.20033436,
                    0.09411184,
                    0.06269478,
                    0.04767408,
                    0.04555556,
                ],
                [
                    0.0491789,
                    0.0529397,
                    0.06768012,
                    0.08147689,
                    0.09111284,
                    0.08904883,
                    0.04626174,
                    0.04555556,
                ],
            ],
            [
                [
                    0.04960964,
                    0.05532468,
                    0.08088584,
                    0.1545973,
                    0.19150554,
                    0.1297717,
                    0.10416789,
                    0.04555556,
                ],
                [
                    0.3547289,
                    0.34400925,
                    0.29073742,
                    0.06359147,
                    0.12326981,
                    0.2184847,
                    0.3018963,
                    0.3633333,
                ],
            ],
        ],
        c.normalize(0.5).tensor,
    )

    q = c.quantize()
    np.testing.assert_array_almost_equal(
        [
            [
                [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            ],
            [
                [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0],
            ],
        ],
        q.tensor,
    )

    assert c.asfloat() == (16, 24)

    a = PInt(1, 2, bits=6)
    b = PInt(2, 1, bits=6)
    c = a + b
    np.testing.assert_array_almost_equal(
        [
            [[0.0, 0.0, 0.0, 0.0, 2.0, 2.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
            [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2.0, 2.0, 2.0, 2.0, 0.0, 0.0]],
        ],
        c.tensor,
    )

    assert c.asfloat() == (3, 3)


def test_xor_3d():
    a = PInt(10, 11, 12, bits=8)
    b = PInt(6, 13, 7, bits=8)
    c = a ^ b
    assert c.asfloat() == (12, 6, 11)

    np.testing.assert_array_almost_equal(
        [
            [
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0],
                ],
                [
                    [0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                ],
            ],
            [
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                ],
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0],
                    [2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0],
                ],
            ],
        ],
        c.tensor,
    )

    a = PInt(10, 11, 12, bits=8, confidence=0.8)
    b = PInt(6, 13, 7, bits=8, confidence=0.7)
    c = a ^ b
    assert c.asfloat() == (12, 6, 11)

    np.testing.assert_array_almost_equal(
        [
            [
                [
                    [
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                    ],
                    [
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.8528572,
                        0.09244898,
                        0.09244898,
                    ],
                ],
                [
                    [
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.8528572,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                    ],
                    [
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                    ],
                ],
            ],
            [
                [
                    [
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.8528572,
                        0.09244898,
                    ],
                    [
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                    ],
                ],
                [
                    [
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.8528572,
                    ],
                    [
                        0.8528572,
                        0.8528572,
                        0.8528572,
                        0.8528572,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                        0.09244898,
                    ],
                ],
            ],
        ],
        c.tensor,
    )

    np.testing.assert_array_almost_equal(
        [
            [
                [
                    [
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                    ],
                    [
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.5685714,
                        0.06163265,
                        0.06163265,
                    ],
                ],
                [
                    [
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.5685714,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                    ],
                    [
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                    ],
                ],
            ],
            [
                [
                    [
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.5685714,
                        0.06163265,
                    ],
                    [
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                    ],
                ],
                [
                    [
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.5685714,
                    ],
                    [
                        0.5685714,
                        0.5685714,
                        0.5685714,
                        0.5685714,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                        0.06163265,
                    ],
                ],
            ],
        ],
        c.normalize(1.0).tensor,
    )


def test_not_3d():
    a = PInt(0, 0, 0, bits=1)
    c = ~a
    assert c.asfloat() == (1, 1, 1)

    a = PInt(0, 0, 1, bits=1)
    c = ~a
    assert c.asfloat() == (1, 1, 0)

    a = PInt(0, 1, 0, bits=1)
    c = ~a
    assert c.asfloat() == (1, 0, 1)

    a = PInt(1, 0, 0, bits=1)
    c = ~a
    assert c.asfloat() == (0, 1, 1)

    a = PInt(1, 1, 0, bits=1)
    c = ~a
    assert c.asfloat() == (0, 0, 1)

    a = PInt(1, 0, 1, bits=1)
    c = ~a
    assert c.asfloat() == (0, 1, 0)

    a = PInt(0, 1, 1, bits=1)
    c = ~a
    assert c.asfloat() == (1, 0, 0)

    a = PInt(1, 1, 1, bits=1)
    c = ~a
    assert c.asfloat() == (0, 0, 0)

    # final
    a = PInt(10, 11, 12, bits=4)
    c = ~a
    assert c.asfloat() == (5, 4, 3)

    np.testing.assert_array_almost_equal(
        [
            [
                [[0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0]],
                [[0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0]],
            ],
            [
                [[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
                [[0.0, 0.0, 1.0, 0.0], [1.0, 0.0, 0.0, 0.0]],
            ],
        ],
        c.tensor,
    )

    a = PInt(10, 11, 12, bits=4, confidence=0.9)
    c = ~a
    assert c.asfloat() == (5, 4, 3)

    a = PInt(10, 11, 12, bits=4, confidence=0.8)
    c = ~a
    assert c.asfloat() == (5, 4, 3)

    a = PInt(10, 11, 12, bits=4, confidence=0.6)
    c = ~a
    assert c.asfloat() == (5, 4, 3)


def test_or_3d():
    a = PInt(0, 0, 0, bits=2)
    b = PInt(0, 0, 0, bits=2)
    c = a | b
    assert c.asfloat() == (0, 0, 0)

    a = PInt(0, 0, 1, bits=2)
    b = PInt(0, 0, 0, bits=2)
    c = a | b
    assert c.asfloat() == (0, 0, 1)

    a = PInt(0, 0, 1, bits=2)
    b = PInt(0, 0, 1, bits=2)
    c = a | b
    assert c.asfloat() == (0, 0, 1)

    a = PInt(0, 1, 0, bits=2)
    b = PInt(0, 1, 0, bits=2)
    c = a | b
    assert c.asfloat() == (0, 1, 0)

    a = PInt(1, 0, 0, bits=2)
    b = PInt(1, 0, 0, bits=2)
    c = a | b
    assert c.asfloat() == (1, 0, 0)

    a = PInt(1, 1, 0, bits=2)
    b = PInt(1, 1, 0, bits=2)
    c = a | b
    assert c.asfloat() == (1, 1, 0)

    a = PInt(1, 0, 1, bits=2)
    b = PInt(1, 0, 1, bits=2)
    c = a | b
    assert c.asfloat() == (1, 0, 1)

    a = PInt(0, 1, 1, bits=2)
    b = PInt(0, 1, 1, bits=2)
    c = a | b
    assert c.asfloat() == (0, 1, 1)

    a = PInt(1, 1, 1, bits=2)
    b = PInt(1, 1, 1, bits=2)
    c = a | b
    assert c.asfloat() == (1, 1, 1)

    # 001
    # 010
    a = PInt(0, 0, 1, bits=2)
    b = PInt(0, 1, 0, bits=2)
    c = a | b
    assert c.asfloat() == (0, 1, 1)

    a = PInt(0, 1, 0, bits=2)
    b = PInt(0, 0, 1, bits=2)
    c = a | b
    assert c.asfloat() == (0, 1, 1)

    # 001
    # 100
    a = PInt(0, 0, 1, bits=2)
    b = PInt(0, 1, 0, bits=2)
    c = a | b
    assert c.asfloat() == (0, 1, 1)

    a = PInt(0, 1, 0, bits=2)
    b = PInt(0, 0, 1, bits=2)
    c = a | b
    assert c.asfloat() == (0, 1, 1)

    # 001
    # 110
    a = PInt(0, 0, 1, bits=2)
    b = PInt(1, 1, 0, bits=2)
    c = a | b
    assert c.asfloat() == (1, 1, 1)

    a = PInt(1, 1, 0, bits=2)
    b = PInt(0, 0, 1, bits=2)
    c = a | b
    assert c.asfloat() == (1, 1, 1)

    # 001
    # 101
    a = PInt(0, 0, 1, bits=2)
    b = PInt(1, 0, 1, bits=2)
    c = a | b
    assert c.asfloat() == (1, 0, 1)

    a = PInt(1, 0, 1, bits=2)
    b = PInt(0, 0, 1, bits=2)
    c = a | b
    assert c.asfloat() == (1, 0, 1)

    # 001
    # 011
    a = PInt(0, 0, 1, bits=2)
    b = PInt(0, 1, 1, bits=2)
    c = a | b
    assert c.asfloat() == (0, 1, 1)

    a = PInt(0, 1, 1, bits=2)
    b = PInt(0, 0, 1, bits=2)
    c = a | b
    assert c.asfloat() == (0, 1, 1)

    # 001
    # 111
    a = PInt(0, 0, 1, bits=2)
    b = PInt(1, 1, 1, bits=2)
    c = a | b
    assert c.asfloat() == (1, 1, 1)

    a = PInt(1, 1, 1, bits=2)
    b = PInt(0, 0, 1, bits=2)
    c = a | b
    assert c.asfloat() == (1, 1, 1)

    # final
    a = PInt(10, 11, 12, bits=4)
    b = PInt(6, 13, 7, bits=4)
    c = a | b
    assert c.asfloat() == (14, 15, 15)

    np.testing.assert_array_almost_equal(
        [
            [
                [[2.0, 2.0, 2.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
                [[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
            ],
            [
                [[0.0, 0.0, 0.0, 2.0], [0.0, 0.0, 0.0, 0.0]],
                [[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]],
            ],
        ],
        c.tensor,
    )

    a = PInt(10, 11, 12, bits=4, confidence=1)
    b = PInt(6, 13, 7, bits=4, confidence=0.9)
    c = a | b
    assert c.asfloat() == (14, 15, 15)

    a = PInt(10, 11, 12, bits=4, confidence=0.9)
    b = PInt(6, 13, 7, bits=4, confidence=0.8)
    c = a | b
    assert c.asfloat() == (14, 15, 15)

    a = PInt(10, 11, 12, bits=4, confidence=0.6)
    b = PInt(6, 13, 7, bits=4, confidence=0.7)
    c = a | b
    assert c.asfloat() == (14, 15, 15)

    np.testing.assert_array_almost_equal(
        [
            [
                [
                    [0.88930607, 1.0007346, 0.8659591, 0.34171426],
                    [0.12628572, 0.02865306, 0.14963265, 0.08914286],
                ],
                [
                    [0.02865306, 0.08914286, 0.22391835, 0.02865306],
                    [0.00955102, 0.00955102, 0.00955102, 0.00955102],
                ],
            ],
            [
                [
                    [0.12628572, 0.08914286, 0.02865306, 0.74816334],
                    [0.10718367, 0.00955102, 0.00955102, 0.07004082],
                ],
                [
                    [0.00955102, 0.07004082, 0.00955102, 0.00955102],
                    [0.00318367, 0.00318367, 0.00318367, 0.00318367],
                ],
            ],
        ],
        c.tensor,
    )

    np.testing.assert_array_almost_equal(
        [
            [
                [
                    [0.6840816, 0.7697959, 0.6661225, 0.2628571],
                    [0.09714286, 0.02204082, 0.11510205, 0.06857143],
                ],
                [
                    [0.02204082, 0.06857144, 0.1722449, 0.02204082],
                    [0.00734694, 0.00734694, 0.00734694, 0.00734694],
                ],
            ],
            [
                [
                    [0.09714286, 0.06857144, 0.02204082, 0.5755102],
                    [0.08244897, 0.00734694, 0.00734694, 0.05387755],
                ],
                [
                    [0.00734694, 0.05387756, 0.00734694, 0.00734694],
                    [0.00244898, 0.00244898, 0.00244898, 0.00244898],
                ],
            ],
        ],
        c.normalize(1.0).tensor,
    )


def test_add_3d():
    a = PInt(10, 11, 12, bits=8)
    b = PInt(6, 13, 7, bits=8)
    c = a + b
    assert c.asfloat() == (16, 24, 19)
    np.testing.assert_array_almost_equal(
        [
            [
                [
                    [0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                ],
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                ],
            ],
            [
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0],
                ],
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0],
                    [2.0, 2.0, 2.0, 0.0, 0.0, 2.0, 0.0, 0.0],
                ],
            ],
        ],
        c.tensor,
    )

    a = PInt(10, 11, bits=8, confidence=0.8)
    b = PInt(6, 13, bits=8, confidence=0.9)
    c = a + b
    assert c.asfloat() == (16, 24)
    np.testing.assert_array_almost_equal(
        [
            [
                [
                    0.15804069,
                    0.16226967,
                    0.20636845,
                    0.6811368,
                    0.31998023,
                    0.21316226,
                    0.16209187,
                    0.1548889,
                ],
                [
                    0.16720827,
                    0.17999499,
                    0.23011242,
                    0.2770214,
                    0.30978364,
                    0.30276603,
                    0.15728992,
                    0.1548889,
                ],
            ],
            [
                [
                    0.16867277,
                    0.18810391,
                    0.27501187,
                    0.5256308,
                    0.6511188,
                    0.44122377,
                    0.35417086,
                    0.1548889,
                ],
                [
                    1.2060783,
                    1.1696315,
                    0.9885073,
                    0.21621099,
                    0.41911733,
                    0.742848,
                    1.0264474,
                    1.2353333,
                ],
            ],
        ],
        c.tensor,
    )

    np.testing.assert_array_almost_equal(
        [
            [
                [
                    0.04648256,
                    0.04772637,
                    0.0606966,
                    0.20033436,
                    0.09411184,
                    0.06269478,
                    0.04767408,
                    0.04555556,
                ],
                [
                    0.0491789,
                    0.0529397,
                    0.06768012,
                    0.08147689,
                    0.09111284,
                    0.08904883,
                    0.04626174,
                    0.04555556,
                ],
            ],
            [
                [
                    0.04960964,
                    0.05532468,
                    0.08088584,
                    0.1545973,
                    0.19150554,
                    0.1297717,
                    0.10416789,
                    0.04555556,
                ],
                [
                    0.3547289,
                    0.34400925,
                    0.29073742,
                    0.06359147,
                    0.12326981,
                    0.2184847,
                    0.3018963,
                    0.3633333,
                ],
            ],
        ],
        c.normalize(0.5).tensor,
    )

    q = c.quantize()
    np.testing.assert_array_almost_equal(
        [
            [
                [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            ],
            [
                [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0],
            ],
        ],
        q.tensor,
    )

    a = PInt(1, 2, bits=6)
    b = PInt(2, 1, bits=6)
    c = a + b
    np.testing.assert_array_almost_equal(
        [
            [[0.0, 0.0, 0.0, 0.0, 2.0, 2.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
            [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2.0, 2.0, 2.0, 2.0, 0.0, 0.0]],
        ],
        c.tensor,
    )


def test_layer_xor():
    a = np.asarray([0, 1])
    b = np.asarray([1, 0])
    c = np.asarray([0.7, 0.3])
    d = np.asarray([0.5, 0.5])

    ab = layer_xor(a, b)
    bc = layer_xor(b, c)
    cc = layer_xor(c, c)
    bd = layer_xor(b, d)

    a = np.asarray([[0, 1], [0, 0]])
    b = np.asarray([[1, 0], [0, 0]])
    c = np.asarray([[0.4, 0.1], [0.3, 0.2]])
    d = np.asarray([[0.25, 0.25], [0.25, 0.25]])

    ab = layer_xor(a, b)
    ac = layer_xor(a, c)
    cc = layer_xor(c, c)
    bd = layer_xor(b, d)


def test_layer_or():
    a = np.asarray([0, 1])
    b = np.asarray([1, 0])
    c = np.asarray([0.7, 0.3])
    d = np.asarray([0.5, 0.5])

    ab = layer_or(a, b)
    bc = layer_or(b, c)
    cc = layer_or(c, c)
    bd = layer_or(b, d)

    a = np.asarray([[0, 1], [0, 0]])
    b = np.asarray([[1, 0], [0, 0]])
    c = np.asarray([[0.4, 0.1], [0.3, 0.2]])
    d = np.asarray([[0.25, 0.25], [0.25, 0.25]])

    ab = layer_or(a, b)
    ac = layer_or(a, c)
    cc = layer_or(c, c)
    bd = layer_or(b, d)
